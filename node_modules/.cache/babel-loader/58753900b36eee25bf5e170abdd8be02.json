{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LooksAhead = void 0;\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser\");\n\nvar keys_1 = require(\"../../grammar/keys\");\n\nvar gast_1 = require(\"../../grammar/gast/gast\");\n/**\r\n * Trait responsible for the lookahead related utilities and optimizations.\r\n */\n\n\nvar LooksAhead =\n/** @class */\nfunction () {\n  function LooksAhead() {}\n\n  LooksAhead.prototype.initLooksAhead = function (config) {\n    this.dynamicTokensEnabled = utils_1.has(config, \"dynamicTokensEnabled\") ? config.dynamicTokensEnabled : parser_1.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n    this.maxLookahead = utils_1.has(config, \"maxLookahead\") ? config.maxLookahead : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;\n    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n\n    this.lookAheadFuncsCache = utils_1.isES2015MapSupported() ? new Map() : []; // Performance optimization on newer engines that support ES6 Map\n    // For larger Maps this is slightly faster than using a plain object (array in our case).\n\n    /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */\n\n    if (utils_1.isES2015MapSupported()) {\n      this.getLaFuncFromCache = this.getLaFuncFromMap;\n      this.setLaFuncCache = this.setLaFuncCacheUsingMap;\n    } else {\n      this.getLaFuncFromCache = this.getLaFuncFromObj;\n      this.setLaFuncCache = this.setLaFuncUsingObj;\n    }\n  };\n\n  LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {\n    var _this = this;\n\n    utils_1.forEach(rules, function (currRule) {\n      _this.TRACE_INIT(currRule.name + \" Rule Lookahead\", function () {\n        var _a = gast_1.collectMethods(currRule),\n            alternation = _a.alternation,\n            repetition = _a.repetition,\n            option = _a.option,\n            repetitionMandatory = _a.repetitionMandatory,\n            repetitionMandatoryWithSeparator = _a.repetitionMandatoryWithSeparator,\n            repetitionWithSeparator = _a.repetitionWithSeparator;\n\n        utils_1.forEach(alternation, function (currProd) {\n          var prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n\n          _this.TRACE_INIT(\"\" + gast_1.getProductionDslName(currProd) + prodIdx, function () {\n            var laFunc = lookahead_1.buildLookaheadFuncForOr(currProd.idx, currRule, currProd.maxLookahead || _this.maxLookahead, currProd.hasPredicates, _this.dynamicTokensEnabled, _this.lookAheadBuilderForAlternatives);\n            var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[currRule.name], keys_1.OR_IDX, currProd.idx);\n\n            _this.setLaFuncCache(key, laFunc);\n          });\n        });\n        utils_1.forEach(repetition, function (currProd) {\n          _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_IDX, lookahead_1.PROD_TYPE.REPETITION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\n        });\n        utils_1.forEach(option, function (currProd) {\n          _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.OPTION_IDX, lookahead_1.PROD_TYPE.OPTION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\n        });\n        utils_1.forEach(repetitionMandatory, function (currProd) {\n          _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\n        });\n        utils_1.forEach(repetitionMandatoryWithSeparator, function (currProd) {\n          _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\n        });\n        utils_1.forEach(repetitionWithSeparator, function (currProd) {\n          _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\n        });\n      });\n    });\n  };\n\n  LooksAhead.prototype.computeLookaheadFunc = function (rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n    var _this = this;\n\n    this.TRACE_INIT(\"\" + dslMethodName + (prodOccurrence === 0 ? \"\" : prodOccurrence), function () {\n      var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(prodOccurrence, rule, prodMaxLookahead || _this.maxLookahead, _this.dynamicTokensEnabled, prodType, _this.lookAheadBuilderForOptional);\n      var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n\n      _this.setLaFuncCache(key, laFunc);\n    });\n  };\n\n  LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {\n    return lookahead_1.buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled);\n  };\n\n  LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    return lookahead_1.buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n  }; // this actually returns a number, but it is always used as a string (object prop key)\n\n\n  LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {\n    var currRuleShortName = this.getLastExplicitRuleShortName();\n    return keys_1.getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\n  };\n  /* istanbul ignore next */\n\n\n  LooksAhead.prototype.getLaFuncFromCache = function (key) {\n    return undefined;\n  };\n\n  LooksAhead.prototype.getLaFuncFromMap = function (key) {\n    return this.lookAheadFuncsCache.get(key);\n  };\n  /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n\n\n  LooksAhead.prototype.getLaFuncFromObj = function (key) {\n    return this.lookAheadFuncsCache[key];\n  };\n  /* istanbul ignore next */\n\n\n  LooksAhead.prototype.setLaFuncCache = function (key, value) {};\n\n  LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {\n    this.lookAheadFuncsCache.set(key, value);\n  };\n  /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n\n\n  LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {\n    this.lookAheadFuncsCache[key] = value;\n  };\n\n  return LooksAhead;\n}();\n\nexports.LooksAhead = LooksAhead;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/looksahead.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LooksAhead = void 0;\r\nvar lookahead_1 = require(\"../../grammar/lookahead\");\r\nvar utils_1 = require(\"@chevrotain/utils\");\r\nvar parser_1 = require(\"../parser\");\r\nvar keys_1 = require(\"../../grammar/keys\");\r\nvar gast_1 = require(\"../../grammar/gast/gast\");\r\n/**\r\n * Trait responsible for the lookahead related utilities and optimizations.\r\n */\r\nvar LooksAhead = /** @class */ (function () {\r\n    function LooksAhead() {\r\n    }\r\n    LooksAhead.prototype.initLooksAhead = function (config) {\r\n        this.dynamicTokensEnabled = utils_1.has(config, \"dynamicTokensEnabled\")\r\n            ? config.dynamicTokensEnabled\r\n            : parser_1.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\r\n        this.maxLookahead = utils_1.has(config, \"maxLookahead\")\r\n            ? config.maxLookahead\r\n            : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;\r\n        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\r\n        this.lookAheadFuncsCache = utils_1.isES2015MapSupported() ? new Map() : [];\r\n        // Performance optimization on newer engines that support ES6 Map\r\n        // For larger Maps this is slightly faster than using a plain object (array in our case).\r\n        /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */\r\n        if (utils_1.isES2015MapSupported()) {\r\n            this.getLaFuncFromCache = this.getLaFuncFromMap;\r\n            this.setLaFuncCache = this.setLaFuncCacheUsingMap;\r\n        }\r\n        else {\r\n            this.getLaFuncFromCache = this.getLaFuncFromObj;\r\n            this.setLaFuncCache = this.setLaFuncUsingObj;\r\n        }\r\n    };\r\n    LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {\r\n        var _this = this;\r\n        utils_1.forEach(rules, function (currRule) {\r\n            _this.TRACE_INIT(currRule.name + \" Rule Lookahead\", function () {\r\n                var _a = gast_1.collectMethods(currRule), alternation = _a.alternation, repetition = _a.repetition, option = _a.option, repetitionMandatory = _a.repetitionMandatory, repetitionMandatoryWithSeparator = _a.repetitionMandatoryWithSeparator, repetitionWithSeparator = _a.repetitionWithSeparator;\r\n                utils_1.forEach(alternation, function (currProd) {\r\n                    var prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\r\n                    _this.TRACE_INIT(\"\" + gast_1.getProductionDslName(currProd) + prodIdx, function () {\r\n                        var laFunc = lookahead_1.buildLookaheadFuncForOr(currProd.idx, currRule, currProd.maxLookahead || _this.maxLookahead, currProd.hasPredicates, _this.dynamicTokensEnabled, _this.lookAheadBuilderForAlternatives);\r\n                        var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[currRule.name], keys_1.OR_IDX, currProd.idx);\r\n                        _this.setLaFuncCache(key, laFunc);\r\n                    });\r\n                });\r\n                utils_1.forEach(repetition, function (currProd) {\r\n                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_IDX, lookahead_1.PROD_TYPE.REPETITION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\r\n                });\r\n                utils_1.forEach(option, function (currProd) {\r\n                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.OPTION_IDX, lookahead_1.PROD_TYPE.OPTION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\r\n                });\r\n                utils_1.forEach(repetitionMandatory, function (currProd) {\r\n                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\r\n                });\r\n                utils_1.forEach(repetitionMandatoryWithSeparator, function (currProd) {\r\n                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\r\n                });\r\n                utils_1.forEach(repetitionWithSeparator, function (currProd) {\r\n                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));\r\n                });\r\n            });\r\n        });\r\n    };\r\n    LooksAhead.prototype.computeLookaheadFunc = function (rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\r\n        var _this = this;\r\n        this.TRACE_INIT(\"\" + dslMethodName + (prodOccurrence === 0 ? \"\" : prodOccurrence), function () {\r\n            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(prodOccurrence, rule, prodMaxLookahead || _this.maxLookahead, _this.dynamicTokensEnabled, prodType, _this.lookAheadBuilderForOptional);\r\n            var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\r\n            _this.setLaFuncCache(key, laFunc);\r\n        });\r\n    };\r\n    LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {\r\n        return lookahead_1.buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled);\r\n    };\r\n    LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\r\n        return lookahead_1.buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);\r\n    };\r\n    // this actually returns a number, but it is always used as a string (object prop key)\r\n    LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {\r\n        var currRuleShortName = this.getLastExplicitRuleShortName();\r\n        return keys_1.getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\r\n    };\r\n    /* istanbul ignore next */\r\n    LooksAhead.prototype.getLaFuncFromCache = function (key) {\r\n        return undefined;\r\n    };\r\n    LooksAhead.prototype.getLaFuncFromMap = function (key) {\r\n        return this.lookAheadFuncsCache.get(key);\r\n    };\r\n    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\r\n    LooksAhead.prototype.getLaFuncFromObj = function (key) {\r\n        return this.lookAheadFuncsCache[key];\r\n    };\r\n    /* istanbul ignore next */\r\n    LooksAhead.prototype.setLaFuncCache = function (key, value) { };\r\n    LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {\r\n        this.lookAheadFuncsCache.set(key, value);\r\n    };\r\n    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\r\n    LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {\r\n        this.lookAheadFuncsCache[key] = value;\r\n    };\r\n    return LooksAhead;\r\n}());\r\nexports.LooksAhead = LooksAhead;\r\n//# sourceMappingURL=looksahead.js.map"]},"metadata":{},"sourceType":"script"}