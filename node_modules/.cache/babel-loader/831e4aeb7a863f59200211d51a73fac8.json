{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\n\nfunction OperatorNode(a, b, op) {\n  TempNode.call(this);\n  this.a = a;\n  this.b = b;\n  this.op = op;\n}\n\nOperatorNode.ADD = '+';\nOperatorNode.SUB = '-';\nOperatorNode.MUL = '*';\nOperatorNode.DIV = '/';\nOperatorNode.prototype = Object.create(TempNode.prototype);\nOperatorNode.prototype.constructor = OperatorNode;\nOperatorNode.prototype.nodeType = 'Operator';\n\nOperatorNode.prototype.getType = function (builder) {\n  var a = this.a.getType(builder),\n      b = this.b.getType(builder);\n\n  if (builder.isTypeMatrix(a)) {\n    return 'v4';\n  } else if (builder.getTypeLength(b) > builder.getTypeLength(a)) {\n    // use the greater length vector\n    return b;\n  }\n\n  return a;\n};\n\nOperatorNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder);\n  var a = this.a.build(builder, type),\n      b = this.b.build(builder, type);\n  return builder.format('( ' + a + ' ' + this.op + ' ' + b + ' )', type, output);\n};\n\nOperatorNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.a = source.a;\n  this.b = source.b;\n  this.op = source.op;\n  return this;\n};\n\nOperatorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.a = this.a.toJSON(meta).uuid;\n    data.b = this.b.toJSON(meta).uuid;\n    data.op = this.op;\n  }\n\n  return data;\n};\n\nexport { OperatorNode };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/nodes/math/OperatorNode.js"],"names":["TempNode","OperatorNode","a","b","op","call","ADD","SUB","MUL","DIV","prototype","Object","create","constructor","nodeType","getType","builder","isTypeMatrix","getTypeLength","generate","output","type","build","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","sourcesContent":["import { TempNode } from '../core/TempNode.js';\r\n\r\nfunction OperatorNode(a, b, op) {\r\n  TempNode.call(this);\r\n  this.a = a;\r\n  this.b = b;\r\n  this.op = op;\r\n}\r\n\r\nOperatorNode.ADD = '+';\r\nOperatorNode.SUB = '-';\r\nOperatorNode.MUL = '*';\r\nOperatorNode.DIV = '/';\r\nOperatorNode.prototype = Object.create(TempNode.prototype);\r\nOperatorNode.prototype.constructor = OperatorNode;\r\nOperatorNode.prototype.nodeType = 'Operator';\r\n\r\nOperatorNode.prototype.getType = function (builder) {\r\n  var a = this.a.getType(builder),\r\n      b = this.b.getType(builder);\r\n\r\n  if (builder.isTypeMatrix(a)) {\r\n    return 'v4';\r\n  } else if (builder.getTypeLength(b) > builder.getTypeLength(a)) {\r\n    // use the greater length vector\r\n    return b;\r\n  }\r\n\r\n  return a;\r\n};\r\n\r\nOperatorNode.prototype.generate = function (builder, output) {\r\n  var type = this.getType(builder);\r\n  var a = this.a.build(builder, type),\r\n      b = this.b.build(builder, type);\r\n  return builder.format('( ' + a + ' ' + this.op + ' ' + b + ' )', type, output);\r\n};\r\n\r\nOperatorNode.prototype.copy = function (source) {\r\n  TempNode.prototype.copy.call(this, source);\r\n  this.a = source.a;\r\n  this.b = source.b;\r\n  this.op = source.op;\r\n  return this;\r\n};\r\n\r\nOperatorNode.prototype.toJSON = function (meta) {\r\n  var data = this.getJSONNode(meta);\r\n\r\n  if (!data) {\r\n    data = this.createJSONNode(meta);\r\n    data.a = this.a.toJSON(meta).uuid;\r\n    data.b = this.b.toJSON(meta).uuid;\r\n    data.op = this.op;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport { OperatorNode };\r\n"]},"metadata":{},"sourceType":"module"}