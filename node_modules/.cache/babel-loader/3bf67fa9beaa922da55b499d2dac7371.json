{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandler = void 0;\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar parser_1 = require(\"../parser\");\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\n\n\nvar ErrorHandler =\n/** @class */\nfunction () {\n  function ErrorHandler() {}\n\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = utils_1.has(config, \"errorMessageProvider\") ? config.errorMessageProvider : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (exceptions_public_1.isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n\n      this._errors.push(error);\n\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function () {\n      return utils_1.cloneArr(this._errors);\n    },\n    set: function (newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: consider caching the error message computed information\n\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }; // TODO: consider caching the error message computed information\n\n\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName]; // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n\n  return ErrorHandler;\n}();\n\nexports.ErrorHandler = ErrorHandler;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/error_handler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ErrorHandler = void 0;\r\nvar exceptions_public_1 = require(\"../../exceptions_public\");\r\nvar utils_1 = require(\"@chevrotain/utils\");\r\nvar lookahead_1 = require(\"../../grammar/lookahead\");\r\nvar parser_1 = require(\"../parser\");\r\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\r\nvar ErrorHandler = /** @class */ (function () {\r\n    function ErrorHandler() {\r\n    }\r\n    ErrorHandler.prototype.initErrorHandler = function (config) {\r\n        this._errors = [];\r\n        this.errorMessageProvider = utils_1.has(config, \"errorMessageProvider\")\r\n            ? config.errorMessageProvider\r\n            : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\r\n    };\r\n    ErrorHandler.prototype.SAVE_ERROR = function (error) {\r\n        if (exceptions_public_1.isRecognitionException(error)) {\r\n            error.context = {\r\n                ruleStack: this.getHumanReadableRuleStack(),\r\n                ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\r\n            };\r\n            this._errors.push(error);\r\n            return error;\r\n        }\r\n        else {\r\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\r\n        }\r\n    };\r\n    Object.defineProperty(ErrorHandler.prototype, \"errors\", {\r\n        get: function () {\r\n            return utils_1.cloneArr(this._errors);\r\n        },\r\n        set: function (newErrors) {\r\n            this._errors = newErrors;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // TODO: consider caching the error message computed information\r\n    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\r\n        var ruleName = this.getCurrRuleFullName();\r\n        var ruleGrammar = this.getGAstProductions()[ruleName];\r\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\r\n        var insideProdPaths = lookAheadPathsPerAlternative[0];\r\n        var actualTokens = [];\r\n        for (var i = 1; i <= this.maxLookahead; i++) {\r\n            actualTokens.push(this.LA(i));\r\n        }\r\n        var msg = this.errorMessageProvider.buildEarlyExitMessage({\r\n            expectedIterationPaths: insideProdPaths,\r\n            actual: actualTokens,\r\n            previous: this.LA(0),\r\n            customUserDescription: userDefinedErrMsg,\r\n            ruleName: ruleName\r\n        });\r\n        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\r\n    };\r\n    // TODO: consider caching the error message computed information\r\n    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\r\n        var ruleName = this.getCurrRuleFullName();\r\n        var ruleGrammar = this.getGAstProductions()[ruleName];\r\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\r\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\r\n        var actualTokens = [];\r\n        for (var i = 1; i <= this.maxLookahead; i++) {\r\n            actualTokens.push(this.LA(i));\r\n        }\r\n        var previousToken = this.LA(0);\r\n        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\r\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\r\n            actual: actualTokens,\r\n            previous: previousToken,\r\n            customUserDescription: errMsgTypes,\r\n            ruleName: this.getCurrRuleFullName()\r\n        });\r\n        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\r\n    };\r\n    return ErrorHandler;\r\n}());\r\nexports.ErrorHandler = ErrorHandler;\r\n//# sourceMappingURL=error_handler.js.map"]},"metadata":{},"sourceType":"script"}