{"ast":null,"code":"/**\r\n * Pixelation shader\r\n */\nvar PixelShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: null\n    },\n    pixelSize: {\n      value: 1\n    }\n  },\n  vertexShader: ['varying highp vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float pixelSize;', 'uniform vec2 resolution;', 'varying highp vec2 vUv;', 'void main(){', 'vec2 dxy = pixelSize / resolution;', 'vec2 coord = dxy * floor( vUv / dxy );', 'gl_FragColor = texture2D(tDiffuse, coord);', '}'].join('\\n')\n};\nexport { PixelShader };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/shaders/PixelShader.js"],"names":["PixelShader","uniforms","tDiffuse","value","resolution","pixelSize","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,UAAU,EAAE;AACVD,MAAAA,KAAK,EAAE;AADG,KAJJ;AAORE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAE;AADE;AAPH,GADM;AAYhBG,EAAAA,YAAY,EAAE,CAAC,yBAAD,EAA4B,eAA5B,EAA6C,WAA7C,EAA0D,2EAA1D,EAAuI,GAAvI,EAA4IC,IAA5I,CAAiJ,IAAjJ,CAZE;AAahBC,EAAAA,cAAc,EAAE,CAAC,6BAAD,EAAgC,0BAAhC,EAA4D,0BAA5D,EAAwF,yBAAxF,EAAmH,cAAnH,EAAmI,oCAAnI,EAAyK,wCAAzK,EAAmN,4CAAnN,EAAiQ,GAAjQ,EAAsQD,IAAtQ,CAA2Q,IAA3Q;AAbA,CAAlB;AAgBA,SAASP,WAAT","sourcesContent":["/**\r\n * Pixelation shader\r\n */\r\nvar PixelShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    resolution: {\r\n      value: null\r\n    },\r\n    pixelSize: {\r\n      value: 1\r\n    }\r\n  },\r\n  vertexShader: ['varying highp vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\r\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float pixelSize;', 'uniform vec2 resolution;', 'varying highp vec2 vUv;', 'void main(){', 'vec2 dxy = pixelSize / resolution;', 'vec2 coord = dxy * floor( vUv / dxy );', 'gl_FragColor = texture2D(tDiffuse, coord);', '}'].join('\\n')\r\n};\r\n\r\nexport { PixelShader };\r\n"]},"metadata":{},"sourceType":"module"}