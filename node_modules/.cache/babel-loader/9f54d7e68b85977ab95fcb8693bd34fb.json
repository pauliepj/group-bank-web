{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearRegExpParserCache = exports.getRegExpAst = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar regExpAstCache = {};\nvar regExpParser = new regexp_to_ast_1.RegExpParser();\n\nfunction getRegExpAst(regExp) {\n  var regExpStr = regExp.toString();\n\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    var regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexports.getRegExpAst = getRegExpAst;\n\nfunction clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n\nexports.clearRegExpParserCache = clearRegExpParserCache;","map":{"version":3,"sources":["../../../src/scan/reg_exp_parser.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAI,cAAc,GAAG,EAArB;AACA,IAAM,YAAY,GAAG,IAAI,eAAA,CAAA,YAAJ,EAArB;;AAEA,SAAgB,YAAhB,CAA6B,MAA7B,EAA2C;AACzC,MAAM,SAAS,GAAG,MAAM,CAAC,QAAP,EAAlB;;AACA,MAAI,cAAc,CAAC,cAAf,CAA8B,SAA9B,CAAJ,EAA8C;AAC5C,WAAO,cAAc,CAAC,SAAD,CAArB;AACD,GAFD,MAEO;AACL,QAAM,SAAS,GAAG,YAAY,CAAC,OAAb,CAAqB,SAArB,CAAlB;AACA,IAAA,cAAc,CAAC,SAAD,CAAd,GAA4B,SAA5B;AACA,WAAO,SAAP;AACD;AACF;;AATD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAWA,SAAgB,sBAAhB,GAAsC;AACpC,EAAA,cAAc,GAAG,EAAjB;AACD;;AAFD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.clearRegExpParserCache = exports.getRegExpAst = void 0;\r\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\r\nvar regExpAstCache = {};\r\nvar regExpParser = new regexp_to_ast_1.RegExpParser();\r\nfunction getRegExpAst(regExp) {\r\n    var regExpStr = regExp.toString();\r\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\r\n        return regExpAstCache[regExpStr];\r\n    }\r\n    else {\r\n        var regExpAst = regExpParser.pattern(regExpStr);\r\n        regExpAstCache[regExpStr] = regExpAst;\r\n        return regExpAst;\r\n    }\r\n}\r\nexports.getRegExpAst = getRegExpAst;\r\nfunction clearRegExpParserCache() {\r\n    regExpAstCache = {};\r\n}\r\nexports.clearRegExpParserCache = clearRegExpParserCache;\r\n//# sourceMappingURL=reg_exp_parser.js.map"]},"metadata":{},"sourceType":"script"}