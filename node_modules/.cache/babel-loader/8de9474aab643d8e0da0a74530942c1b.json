{"ast":null,"code":"import { MathUtils } from 'three';\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\n\nfunction NodePass() {\n  ShaderPass.call(this);\n  this.name = '';\n  this.uuid = MathUtils.generateUUID();\n  this.userData = {};\n  this.textureID = 'renderTexture';\n  this.input = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.needsUpdate = true;\n}\n\nNodePass.prototype = Object.create(ShaderPass.prototype);\nNodePass.prototype.constructor = NodePass;\n\nNodePass.prototype.render = function () {\n  if (this.needsUpdate) {\n    this.material.dispose();\n    this.material.fragment.value = this.input;\n    this.needsUpdate = false;\n  }\n\n  this.uniforms = this.material.uniforms;\n  ShaderPass.prototype.render.apply(this, arguments);\n};\n\nNodePass.prototype.copy = function (source) {\n  this.input = source.input;\n  return this;\n};\n\nNodePass.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.passes) meta.passes = {};\n\n  if (!meta.passes[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = 'NodePass';\n    meta.passes[this.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.input = this.input.toJSON(meta).uuid;\n  }\n\n  meta.pass = this.uuid;\n  return meta;\n};\n\nexport { NodePass };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/nodes/postprocessing/NodePass.js"],"names":["MathUtils","ShaderPass","NodeMaterial","ScreenNode","NodePass","call","name","uuid","generateUUID","userData","textureID","input","material","needsUpdate","prototype","Object","create","constructor","render","dispose","fragment","value","uniforms","apply","arguments","copy","source","toJSON","meta","isRootObject","undefined","nodes","passes","data","type","JSON","stringify","pass"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAEA,SAASC,QAAT,GAAoB;AAClBH,EAAAA,UAAU,CAACI,IAAX,CAAgB,IAAhB;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,IAAL,GAAYP,SAAS,CAACQ,YAAV,EAAZ;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,SAAL,GAAiB,eAAjB;AACA,OAAKC,KAAL,GAAa,IAAIR,UAAJ,EAAb;AACA,OAAKS,QAAL,GAAgB,IAAIV,YAAJ,EAAhB;AACA,OAAKW,WAAL,GAAmB,IAAnB;AACD;;AAEDT,QAAQ,CAACU,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcf,UAAU,CAACa,SAAzB,CAArB;AACAV,QAAQ,CAACU,SAAT,CAAmBG,WAAnB,GAAiCb,QAAjC;;AAEAA,QAAQ,CAACU,SAAT,CAAmBI,MAAnB,GAA4B,YAAY;AACtC,MAAI,KAAKL,WAAT,EAAsB;AACpB,SAAKD,QAAL,CAAcO,OAAd;AACA,SAAKP,QAAL,CAAcQ,QAAd,CAAuBC,KAAvB,GAA+B,KAAKV,KAApC;AACA,SAAKE,WAAL,GAAmB,KAAnB;AACD;;AAED,OAAKS,QAAL,GAAgB,KAAKV,QAAL,CAAcU,QAA9B;AACArB,EAAAA,UAAU,CAACa,SAAX,CAAqBI,MAArB,CAA4BK,KAA5B,CAAkC,IAAlC,EAAwCC,SAAxC;AACD,CATD;;AAWApB,QAAQ,CAACU,SAAT,CAAmBW,IAAnB,GAA0B,UAAUC,MAAV,EAAkB;AAC1C,OAAKf,KAAL,GAAae,MAAM,CAACf,KAApB;AACA,SAAO,IAAP;AACD,CAHD;;AAKAP,QAAQ,CAACU,SAAT,CAAmBa,MAAnB,GAA4B,UAAUC,IAAV,EAAgB;AAC1C,MAAIC,YAAY,GAAGD,IAAI,KAAKE,SAAT,IAAsB,OAAOF,IAAP,KAAgB,QAAzD;;AAEA,MAAIC,YAAJ,EAAkB;AAChBD,IAAAA,IAAI,GAAG;AACLG,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD;;AAED,MAAIH,IAAI,IAAI,CAACA,IAAI,CAACI,MAAlB,EAA0BJ,IAAI,CAACI,MAAL,GAAc,EAAd;;AAE1B,MAAI,CAACJ,IAAI,CAACI,MAAL,CAAY,KAAKzB,IAAjB,CAAL,EAA6B;AAC3B,QAAI0B,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAAC1B,IAAL,GAAY,KAAKA,IAAjB;AACA0B,IAAAA,IAAI,CAACC,IAAL,GAAY,UAAZ;AACAN,IAAAA,IAAI,CAACI,MAAL,CAAY,KAAKzB,IAAjB,IAAyB0B,IAAzB;AACA,QAAI,KAAK3B,IAAL,KAAc,EAAlB,EAAsB2B,IAAI,CAAC3B,IAAL,GAAY,KAAKA,IAAjB;AACtB,QAAI6B,IAAI,CAACC,SAAL,CAAe,KAAK3B,QAApB,MAAkC,IAAtC,EAA4CwB,IAAI,CAACxB,QAAL,GAAgB,KAAKA,QAArB;AAC5CwB,IAAAA,IAAI,CAACtB,KAAL,GAAa,KAAKA,KAAL,CAAWgB,MAAX,CAAkBC,IAAlB,EAAwBrB,IAArC;AACD;;AAEDqB,EAAAA,IAAI,CAACS,IAAL,GAAY,KAAK9B,IAAjB;AACA,SAAOqB,IAAP;AACD,CAvBD;;AAyBA,SAASxB,QAAT","sourcesContent":["import { MathUtils } from 'three';\r\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\r\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\r\nimport { ScreenNode } from '../inputs/ScreenNode.js';\r\n\r\nfunction NodePass() {\r\n  ShaderPass.call(this);\r\n  this.name = '';\r\n  this.uuid = MathUtils.generateUUID();\r\n  this.userData = {};\r\n  this.textureID = 'renderTexture';\r\n  this.input = new ScreenNode();\r\n  this.material = new NodeMaterial();\r\n  this.needsUpdate = true;\r\n}\r\n\r\nNodePass.prototype = Object.create(ShaderPass.prototype);\r\nNodePass.prototype.constructor = NodePass;\r\n\r\nNodePass.prototype.render = function () {\r\n  if (this.needsUpdate) {\r\n    this.material.dispose();\r\n    this.material.fragment.value = this.input;\r\n    this.needsUpdate = false;\r\n  }\r\n\r\n  this.uniforms = this.material.uniforms;\r\n  ShaderPass.prototype.render.apply(this, arguments);\r\n};\r\n\r\nNodePass.prototype.copy = function (source) {\r\n  this.input = source.input;\r\n  return this;\r\n};\r\n\r\nNodePass.prototype.toJSON = function (meta) {\r\n  var isRootObject = meta === undefined || typeof meta === 'string';\r\n\r\n  if (isRootObject) {\r\n    meta = {\r\n      nodes: {}\r\n    };\r\n  }\r\n\r\n  if (meta && !meta.passes) meta.passes = {};\r\n\r\n  if (!meta.passes[this.uuid]) {\r\n    var data = {};\r\n    data.uuid = this.uuid;\r\n    data.type = 'NodePass';\r\n    meta.passes[this.uuid] = data;\r\n    if (this.name !== '') data.name = this.name;\r\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\r\n    data.input = this.input.toJSON(meta).uuid;\r\n  }\r\n\r\n  meta.pass = this.uuid;\r\n  return meta;\r\n};\r\n\r\nexport { NodePass };\r\n"]},"metadata":{},"sourceType":"module"}