{"ast":null,"code":"import * as React from 'react';\nimport { AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = React.useRef();\n  const actualRef = root ? root : ref; // eslint-disable-next-line prettier/prettier\n\n  const [mixer] = React.useState(() => new AnimationMixer(undefined));\n  const lazyActions = React.useRef({});\n  const [api] = React.useState(() => {\n    let actions = {};\n    clips.forEach(clip => Object.defineProperty(actions, clip.name, {\n      enumerable: true,\n\n      get() {\n        if (actualRef.current) {\n          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));\n        }\n      }\n\n    }));\n    return {\n      ref: actualRef,\n      clips,\n      actions,\n      names: clips.map(c => c.name),\n      mixer\n    };\n  });\n  useFrame((state, delta) => mixer.update(delta));\n  React.useEffect(() => {\n    const currentRoot = actualRef.current;\n    return () => {\n      // Clean up only when clips change, wipe out lazy actions and uncache clips\n      lazyActions.current = {};\n      Object.values(api.actions).forEach(action => {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clips]);\n  return api;\n}\n\nexport { useAnimations };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/@react-three/drei/core/useAnimations.js"],"names":["React","AnimationMixer","useFrame","useAnimations","clips","root","ref","useRef","actualRef","mixer","useState","undefined","lazyActions","api","actions","forEach","clip","Object","defineProperty","name","enumerable","get","current","clipAction","names","map","c","state","delta","update","useEffect","currentRoot","values","action","uncacheAction"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAClC,QAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,EAAZ;AACA,QAAMC,SAAS,GAAGH,IAAI,GAAGA,IAAH,GAAUC,GAAhC,CAFkC,CAEG;;AAErC,QAAM,CAACG,KAAD,IAAUT,KAAK,CAACU,QAAN,CAAe,MAAM,IAAIT,cAAJ,CAAmBU,SAAnB,CAArB,CAAhB;AACA,QAAMC,WAAW,GAAGZ,KAAK,CAACO,MAAN,CAAa,EAAb,CAApB;AACA,QAAM,CAACM,GAAD,IAAQb,KAAK,CAACU,QAAN,CAAe,MAAM;AACjC,QAAII,OAAO,GAAG,EAAd;AACAV,IAAAA,KAAK,CAACW,OAAN,CAAcC,IAAI,IAAIC,MAAM,CAACC,cAAP,CAAsBJ,OAAtB,EAA+BE,IAAI,CAACG,IAApC,EAA0C;AAC9DC,MAAAA,UAAU,EAAE,IADkD;;AAG9DC,MAAAA,GAAG,GAAG;AACJ,YAAIb,SAAS,CAACc,OAAd,EAAuB;AACrB,iBAAOV,WAAW,CAACU,OAAZ,CAAoBN,IAAI,CAACG,IAAzB,MAAmCP,WAAW,CAACU,OAAZ,CAAoBN,IAAI,CAACG,IAAzB,IAAiCV,KAAK,CAACc,UAAN,CAAiBP,IAAjB,EAAuBR,SAAS,CAACc,OAAjC,CAApE,CAAP;AACD;AACF;;AAP6D,KAA1C,CAAtB;AAUA,WAAO;AACLhB,MAAAA,GAAG,EAAEE,SADA;AAELJ,MAAAA,KAFK;AAGLU,MAAAA,OAHK;AAILU,MAAAA,KAAK,EAAEpB,KAAK,CAACqB,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACP,IAAjB,CAJF;AAKLV,MAAAA;AALK,KAAP;AAOD,GAnBa,CAAd;AAoBAP,EAAAA,QAAQ,CAAC,CAACyB,KAAD,EAAQC,KAAR,KAAkBnB,KAAK,CAACoB,MAAN,CAAaD,KAAb,CAAnB,CAAR;AACA5B,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGvB,SAAS,CAACc,OAA9B;AACA,WAAO,MAAM;AACX;AACAV,MAAAA,WAAW,CAACU,OAAZ,GAAsB,EAAtB;AACAL,MAAAA,MAAM,CAACe,MAAP,CAAcnB,GAAG,CAACC,OAAlB,EAA2BC,OAA3B,CAAmCkB,MAAM,IAAI;AAC3C,YAAIF,WAAJ,EAAiB;AACftB,UAAAA,KAAK,CAACyB,aAAN,CAAoBD,MAApB,EAA4BF,WAA5B;AACD;AACF,OAJD;AAKD,KARD,CAFoB,CAUjB;AACJ,GAXD,EAWG,CAAC3B,KAAD,CAXH;AAYA,SAAOS,GAAP;AACD;;AAED,SAASV,aAAT","sourcesContent":["import * as React from 'react';\nimport { AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = React.useRef();\n  const actualRef = root ? root : ref; // eslint-disable-next-line prettier/prettier\n\n  const [mixer] = React.useState(() => new AnimationMixer(undefined));\n  const lazyActions = React.useRef({});\n  const [api] = React.useState(() => {\n    let actions = {};\n    clips.forEach(clip => Object.defineProperty(actions, clip.name, {\n      enumerable: true,\n\n      get() {\n        if (actualRef.current) {\n          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));\n        }\n      }\n\n    }));\n    return {\n      ref: actualRef,\n      clips,\n      actions,\n      names: clips.map(c => c.name),\n      mixer\n    };\n  });\n  useFrame((state, delta) => mixer.update(delta));\n  React.useEffect(() => {\n    const currentRoot = actualRef.current;\n    return () => {\n      // Clean up only when clips change, wipe out lazy actions and uncache clips\n      lazyActions.current = {};\n      Object.values(api.actions).forEach(action => {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clips]);\n  return api;\n}\n\nexport { useAnimations };\n"]},"metadata":{},"sourceType":"module"}