{"ast":null,"code":"/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\nexport { HorizontalBlurShader };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/shaders/HorizontalBlurShader.js"],"names":["HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAoB,GAAG;AAC3BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,CAAC,EAAE;AACDD,MAAAA,KAAK,EAAE,MAAM;AADZ;AAJK,GADiB;AAS3BE,EAAAA,YAAY;AACZ;AACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GApB6B;AAqB3BC,EAAAA,cAAc;AACd;AACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9C6B,CAA7B;AAiDA,SAASN,oBAAT","sourcesContent":["/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\r\nconst HorizontalBlurShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    h: {\r\n      value: 1.0 / 512.0\r\n    }\r\n  },\r\n  vertexShader:\r\n  /* glsl */\r\n  `\r\n      varying vec2 vUv;\r\n\r\n      void main() {\r\n\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n      }\r\n  `,\r\n  fragmentShader:\r\n  /* glsl */\r\n  `\r\n    uniform sampler2D tDiffuse;\r\n    uniform float h;\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n    \tvec4 sum = vec4( 0.0 );\r\n\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\r\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\r\n\r\n    \tgl_FragColor = sum;\r\n\r\n    }\r\n  `\r\n};\r\n\r\nexport { HorizontalBlurShader };\r\n"]},"metadata":{},"sourceType":"module"}