{"ast":null,"code":"import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return class extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n}\n\nexport { shaderMaterial };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/@react-three/drei/core/shaderMaterial.js"],"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","ShaderMaterial","constructor","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","forEach","defineProperty","get","set","v"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;AACtE,SAAO,cAAcL,KAAK,CAACM,cAApB,CAAmC;AACxCC,IAAAA,WAAW,GAAG;AACZ,YAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeN,QAAf,CAAhB,CADY,CAC8B;;AAE1C,YAAM;AACJA,QAAAA,QAAQ,EAAEM,OAAO,CAACE,MAAR,CAAe,CAACC,GAAD,EAAM,CAACC,IAAD,EAAOC,KAAP,CAAN,KAAwB;AAC/C,gBAAMC,OAAO,GAAGd,KAAK,CAACe,aAAN,CAAoBC,KAApB,CAA0B;AACxC,aAACJ,IAAD,GAAQ;AACNC,cAAAA;AADM;AADgC,WAA1B,CAAhB;AAKA,iBAAO,EAAE,GAAGF,GAAL;AACL,eAAGG;AADE,WAAP;AAGD,SATS,EASP,EATO,CADN;AAWJX,QAAAA,YAXI;AAYJC,QAAAA;AAZI,OAAN,EAHY,CAgBR;;AAEJI,MAAAA,OAAO,CAACS,OAAR,CAAgB,CAAC,CAACL,IAAD,CAAD,KAAYH,MAAM,CAACS,cAAP,CAAsB,IAAtB,EAA4BN,IAA5B,EAAkC;AAC5DO,QAAAA,GAAG,EAAE,MAAM,KAAKjB,QAAL,CAAcU,IAAd,EAAoBC,KAD6B;AAE5DO,QAAAA,GAAG,EAAEC,CAAC,IAAI,KAAKnB,QAAL,CAAcU,IAAd,EAAoBC,KAApB,GAA4BQ;AAFsB,OAAlC,CAA5B;AAIA,UAAIhB,MAAJ,EAAYA,MAAM,CAAC,IAAD,CAAN;AACb;;AAxBuC,GAA1C;AA2BD;;AAED,SAASJ,cAAT","sourcesContent":["import * as THREE from 'three';\r\n\r\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\r\n  return class extends THREE.ShaderMaterial {\r\n    constructor() {\r\n      const entries = Object.entries(uniforms); // Create unforms and shaders\r\n\r\n      super({\r\n        uniforms: entries.reduce((acc, [name, value]) => {\r\n          const uniform = THREE.UniformsUtils.clone({\r\n            [name]: {\r\n              value\r\n            }\r\n          });\r\n          return { ...acc,\r\n            ...uniform\r\n          };\r\n        }, {}),\r\n        vertexShader,\r\n        fragmentShader\r\n      }); // Create getter/setters\r\n\r\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\r\n        get: () => this.uniforms[name].value,\r\n        set: v => this.uniforms[name].value = v\r\n      }));\r\n      if (onInit) onInit(this);\r\n    }\r\n\r\n  };\r\n}\r\n\r\nexport { shaderMaterial };\r\n"]},"metadata":{},"sourceType":"module"}