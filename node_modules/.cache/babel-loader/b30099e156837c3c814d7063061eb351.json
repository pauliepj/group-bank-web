{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { TessellateModifier } from 'three-stdlib';\n\nfunction useTessellation(passes = 3, maxEdgeLength) {\n  const ref = React.useRef();\n  const original = React.useRef();\n  const modifier = React.useRef();\n  React.useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\n    }\n  }, [maxEdgeLength, passes]);\n  React.useEffect(() => {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  React.useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new THREE.BufferGeometry();\n      geometry = original.current.clone();\n      geometry = modifier.current.modify(geometry);\n      ref.current.geometry = geometry;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\n\nexport { useTessellation };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/@react-three/drei/core/useTessellation.js"],"names":["React","THREE","TessellateModifier","useTessellation","passes","maxEdgeLength","ref","useRef","original","modifier","useEffect","current","geometry","clone","parseInt","BufferGeometry","modify"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,cAAnC;;AAEA,SAASC,eAAT,CAAyBC,MAAM,GAAG,CAAlC,EAAqCC,aAArC,EAAoD;AAClD,QAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,EAAZ;AACA,QAAMC,QAAQ,GAAGR,KAAK,CAACO,MAAN,EAAjB;AACA,QAAME,QAAQ,GAAGT,KAAK,CAACO,MAAN,EAAjB;AACAP,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACF,QAAQ,CAACG,OAAd,EAAuB;AACrBH,MAAAA,QAAQ,CAACG,OAAT,GAAmBL,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBC,KAArB,EAAnB;AACAJ,MAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAIT,kBAAJ,CAAuBY,QAAQ,CAACT,aAAD,CAA/B,EAAgDD,MAAhD,CAAnB;AACD;AACF,GALD,EAKG,CAACC,aAAD,EAAgBD,MAAhB,CALH;AAMAJ,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBD,IAAAA,QAAQ,CAACE,OAAT,CAAiBN,aAAjB,GAAiCA,aAAjC;AACD,GAFD,EAEG,CAACA,aAAD,CAFH;AAGAL,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAIF,QAAQ,CAACG,OAAT,IAAoBL,GAAG,CAACK,OAA5B,EAAqC;AACnC,UAAIC,QAAQ,GAAG,IAAIX,KAAK,CAACc,cAAV,EAAf;AACAH,MAAAA,QAAQ,GAAGJ,QAAQ,CAACG,OAAT,CAAiBE,KAAjB,EAAX;AACAD,MAAAA,QAAQ,GAAGH,QAAQ,CAACE,OAAT,CAAiBK,MAAjB,CAAwBJ,QAAxB,CAAX;AACAN,MAAAA,GAAG,CAACK,OAAJ,CAAYC,QAAZ,GAAuBA,QAAvB;AACD;AACF,GAPD,EAOG,CAACP,aAAD,EAAgBD,MAAhB,CAPH;AAQA,SAAOE,GAAP;AACD;;AAED,SAASH,eAAT","sourcesContent":["import * as React from 'react';\r\nimport * as THREE from 'three';\r\nimport { TessellateModifier } from 'three-stdlib';\r\n\r\nfunction useTessellation(passes = 3, maxEdgeLength) {\r\n  const ref = React.useRef();\r\n  const original = React.useRef();\r\n  const modifier = React.useRef();\r\n  React.useEffect(() => {\r\n    if (!original.current) {\r\n      original.current = ref.current.geometry.clone();\r\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\r\n    }\r\n  }, [maxEdgeLength, passes]);\r\n  React.useEffect(() => {\r\n    modifier.current.maxEdgeLength = maxEdgeLength;\r\n  }, [maxEdgeLength]);\r\n  React.useEffect(() => {\r\n    if (original.current && ref.current) {\r\n      let geometry = new THREE.BufferGeometry();\r\n      geometry = original.current.clone();\r\n      geometry = modifier.current.modify(geometry);\r\n      ref.current.geometry = geometry;\r\n    }\r\n  }, [maxEdgeLength, passes]);\r\n  return ref;\r\n}\r\n\r\nexport { useTessellation };\r\n"]},"metadata":{},"sourceType":"module"}