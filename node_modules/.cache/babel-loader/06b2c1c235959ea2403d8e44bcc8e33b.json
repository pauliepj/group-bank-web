{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar TexturePass = function (map, opacity) {\n  if (CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\n  var shader = CopyShader;\n  this.map = map;\n  this.opacity = opacity !== undefined ? opacity : 1.0;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    depthTest: false,\n    depthWrite: false\n  });\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nTexturePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: TexturePass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms['opacity'].value = this.opacity;\n    this.uniforms['tDiffuse'].value = this.map;\n    this.material.transparent = this.opacity < 1.0;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { TexturePass };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/postprocessing/TexturePass.js"],"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","CopyShader","TexturePass","map","opacity","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","depthTest","depthWrite","needsSwap","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,WAAW,GAAG,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACxC,MAAIH,UAAU,KAAKI,SAAnB,EAA8BC,OAAO,CAACC,KAAR,CAAc,wCAAd;AAC9B,MAAIC,MAAM,GAAGP,UAAb;AACA,OAAKE,GAAL,GAAWA,GAAX;AACA,OAAKC,OAAL,GAAeA,OAAO,KAAKC,SAAZ,GAAwBD,OAAxB,GAAkC,GAAjD;AACA,OAAKK,QAAL,GAAgBZ,aAAa,CAACa,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,OAAKE,QAAL,GAAgB,IAAIb,cAAJ,CAAmB;AACjCW,IAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,IAAAA,YAAY,EAAEJ,MAAM,CAACI,YAFY;AAGjCC,IAAAA,cAAc,EAAEL,MAAM,CAACK,cAHU;AAIjCC,IAAAA,SAAS,EAAE,KAJsB;AAKjCC,IAAAA,UAAU,EAAE;AALqB,GAAnB,CAAhB;AAOA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,MAAL,GAAc,IAAIlB,cAAJ,CAAmB,IAAnB,CAAd;AACD,CAfD;;AAiBAG,WAAW,CAACgB,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcrB,IAAI,CAACkB,SAAnB,CAAd,EAA6C;AACnEI,EAAAA,WAAW,EAAEpB,WADsD;AAEnEqB,EAAAA,MAAM,EAAE,UAAUC,QAAV,EAAoBC,WAApB,EAAiCC;AACzC;AADQ,IAEN;AACA,QAAIC,YAAY,GAAGH,QAAQ,CAACI,SAA5B;AACAJ,IAAAA,QAAQ,CAACI,SAAT,GAAqB,KAArB;AACA,SAAKX,MAAL,CAAYN,QAAZ,GAAuB,KAAKA,QAA5B;AACA,SAAKF,QAAL,CAAc,SAAd,EAAyBoB,KAAzB,GAAiC,KAAKzB,OAAtC;AACA,SAAKK,QAAL,CAAc,UAAd,EAA0BoB,KAA1B,GAAkC,KAAK1B,GAAvC;AACA,SAAKQ,QAAL,CAAcmB,WAAd,GAA4B,KAAK1B,OAAL,GAAe,GAA3C;AACAoB,IAAAA,QAAQ,CAACO,eAAT,CAAyB,KAAKC,cAAL,GAAsB,IAAtB,GAA6BN,UAAtD;AACA,QAAI,KAAKO,KAAT,EAAgBT,QAAQ,CAACS,KAAT;AAChB,SAAKhB,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACAA,IAAAA,QAAQ,CAACI,SAAT,GAAqBD,YAArB;AACD;AAfkE,CAA7C,CAAxB;AAkBA,SAASzB,WAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\r\nimport { FullScreenQuad, Pass } from './Pass.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\n\r\nvar TexturePass = function (map, opacity) {\r\n  if (CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\r\n  var shader = CopyShader;\r\n  this.map = map;\r\n  this.opacity = opacity !== undefined ? opacity : 1.0;\r\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\r\n  this.material = new ShaderMaterial({\r\n    uniforms: this.uniforms,\r\n    vertexShader: shader.vertexShader,\r\n    fragmentShader: shader.fragmentShader,\r\n    depthTest: false,\r\n    depthWrite: false\r\n  });\r\n  this.needsSwap = false;\r\n  this.fsQuad = new FullScreenQuad(null);\r\n};\r\n\r\nTexturePass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: TexturePass,\r\n  render: function (renderer, writeBuffer, readBuffer\r\n  /*, deltaTime, maskActive */\r\n  ) {\r\n    var oldAutoClear = renderer.autoClear;\r\n    renderer.autoClear = false;\r\n    this.fsQuad.material = this.material;\r\n    this.uniforms['opacity'].value = this.opacity;\r\n    this.uniforms['tDiffuse'].value = this.map;\r\n    this.material.transparent = this.opacity < 1.0;\r\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\r\n    if (this.clear) renderer.clear();\r\n    this.fsQuad.render(renderer);\r\n    renderer.autoClear = oldAutoClear;\r\n  }\r\n});\r\n\r\nexport { TexturePass };\r\n"]},"metadata":{},"sourceType":"module"}