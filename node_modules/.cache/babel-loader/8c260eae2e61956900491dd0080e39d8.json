{"ast":null,"code":"import { Loader, FileLoader, Vector3, DataTexture, RGBFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three'; // https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n\nclass LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    let title = null;\n    let size = null;\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    const lines = str.split(/[\\n\\r]+/g);\n    let data = null;\n    let currIndex = 0;\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1);\n          break;\n\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1];\n          size = parseFloat(sizeToken);\n          data = new Uint8Array(size * size * size * 3);\n          break;\n\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1]);\n          domainMin.y = parseFloat(split[2]);\n          domainMin.z = parseFloat(split[3]);\n          break;\n\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1]);\n          domainMax.y = parseFloat(split[2]);\n          domainMax.z = parseFloat(split[3]);\n          break;\n\n        default:\n          const r = parseFloat(split[0]);\n          const g = parseFloat(split[1]);\n          const b = parseFloat(split[2]);\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\n          }\n\n          data[currIndex + 0] = r * 255;\n          data[currIndex + 1] = g * 255;\n          data[currIndex + 2] = b * 255;\n          currIndex += 3;\n      }\n    }\n\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUTCubeLoader };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/loaders/LUTCubeLoader.js"],"names":["Loader","FileLoader","Vector3","DataTexture","RGBFormat","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUTCubeLoader","load","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","text","parse","e","console","error","itemError","str","replace","trim","title","size","domainMin","domainMax","lines","split","data","currIndex","i","l","length","line","substring","sizeToken","parseFloat","Uint8Array","x","y","z","r","g","b","Error","texture","image","width","height","format","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Vector3, DataTexture, RGBFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\r\n\r\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\r\nclass LUTCubeLoader extends Loader {\r\n  load(url, onLoad, onProgress, onError) {\r\n    const loader = new FileLoader(this.manager);\r\n    loader.setPath(this.path);\r\n    loader.setResponseType('text');\r\n    loader.load(url, text => {\r\n      try {\r\n        onLoad(this.parse(text));\r\n      } catch (e) {\r\n        if (onError) {\r\n          onError(e);\r\n        } else {\r\n          console.error(e);\r\n        }\r\n\r\n        this.manager.itemError(url);\r\n      }\r\n    }, onProgress, onError);\r\n  }\r\n\r\n  parse(str) {\r\n    // Remove empty lines and comments\r\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\r\n    let title = null;\r\n    let size = null;\r\n    const domainMin = new Vector3(0, 0, 0);\r\n    const domainMax = new Vector3(1, 1, 1);\r\n    const lines = str.split(/[\\n\\r]+/g);\r\n    let data = null;\r\n    let currIndex = 0;\r\n\r\n    for (let i = 0, l = lines.length; i < l; i++) {\r\n      const line = lines[i].trim();\r\n      const split = line.split(/\\s/g);\r\n\r\n      switch (split[0]) {\r\n        case 'TITLE':\r\n          title = line.substring(7, line.length - 1);\r\n          break;\r\n\r\n        case 'LUT_3D_SIZE':\r\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\r\n          // more precision than can be captured with Uint8Array.\r\n          const sizeToken = split[1];\r\n          size = parseFloat(sizeToken);\r\n          data = new Uint8Array(size * size * size * 3);\r\n          break;\r\n\r\n        case 'DOMAIN_MIN':\r\n          domainMin.x = parseFloat(split[1]);\r\n          domainMin.y = parseFloat(split[2]);\r\n          domainMin.z = parseFloat(split[3]);\r\n          break;\r\n\r\n        case 'DOMAIN_MAX':\r\n          domainMax.x = parseFloat(split[1]);\r\n          domainMax.y = parseFloat(split[2]);\r\n          domainMax.z = parseFloat(split[3]);\r\n          break;\r\n\r\n        default:\r\n          const r = parseFloat(split[0]);\r\n          const g = parseFloat(split[1]);\r\n          const b = parseFloat(split[2]);\r\n\r\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\r\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\r\n          }\r\n\r\n          data[currIndex + 0] = r * 255;\r\n          data[currIndex + 1] = g * 255;\r\n          data[currIndex + 2] = b * 255;\r\n          currIndex += 3;\r\n      }\r\n    }\r\n\r\n    const texture = new DataTexture();\r\n    texture.image.data = data;\r\n    texture.image.width = size;\r\n    texture.image.height = size * size;\r\n    texture.format = RGBFormat;\r\n    texture.type = UnsignedByteType;\r\n    texture.magFilter = LinearFilter;\r\n    texture.minFilter = LinearFilter;\r\n    texture.wrapS = ClampToEdgeWrapping;\r\n    texture.wrapT = ClampToEdgeWrapping;\r\n    texture.generateMipmaps = false;\r\n    const texture3D = new DataTexture3D();\r\n    texture3D.image.data = data;\r\n    texture3D.image.width = size;\r\n    texture3D.image.height = size;\r\n    texture3D.image.depth = size;\r\n    texture3D.format = RGBFormat;\r\n    texture3D.type = UnsignedByteType;\r\n    texture3D.magFilter = LinearFilter;\r\n    texture3D.minFilter = LinearFilter;\r\n    texture3D.wrapS = ClampToEdgeWrapping;\r\n    texture3D.wrapT = ClampToEdgeWrapping;\r\n    texture3D.wrapR = ClampToEdgeWrapping;\r\n    texture3D.generateMipmaps = false;\r\n    return {\r\n      title,\r\n      size,\r\n      domainMin,\r\n      domainMax,\r\n      texture,\r\n      texture3D\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport { LUTCubeLoader };\r\n"]},"metadata":{},"sourceType":"module"}