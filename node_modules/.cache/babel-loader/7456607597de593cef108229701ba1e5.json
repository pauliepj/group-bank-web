{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser\");\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\n\n\nvar PerformanceTracer =\n/** @class */\nfunction () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (utils_1.has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = utils_1.timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CA4CC;;AAvCC,EAAA,iBAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,MAAtB,EAA2C;AACzC,QAAI,OAAA,CAAA,GAAA,CAAI,MAAJ,EAAY,eAAZ,CAAJ,EAAkC;AAChC,UAAM,iBAAiB,GAAG,MAAM,CAAC,aAAjC;AACA,UAAM,aAAa,GAAG,OAAO,iBAAP,KAA6B,QAAnD;AACA,WAAK,iBAAL,GAAyB,aAAa,GAC1B,iBAD0B,GAElC,QAFJ;AAGA,WAAK,aAAL,GAAqB,aAAa,GAC9B,iBAAiB,GAAG,CADU,GAE9B,iBAFJ;AAGD,KATD,MASO;AACL,WAAK,iBAAL,GAAyB,CAAzB;AACA,WAAK,aAAL,GAAqB,QAAA,CAAA,qBAAA,CAAsB,aAA3C;AACD;;AAED,SAAK,eAAL,GAAuB,CAAC,CAAxB;AACD,GAhBD;;AAkBA,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAmC,SAAnC,EAAsD,SAAtD,EAAwE;AACtE;AACA;AACA,QAAI,KAAK,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,WAAK,eAAL;AACA,UAAM,MAAM,GAAG,IAAI,KAAJ,CAAU,KAAK,eAAL,GAAuB,CAAjC,EAAoC,IAApC,CAAyC,IAAzC,CAAf;;AACA,UAAI,KAAK,eAAL,GAAuB,KAAK,iBAAhC,EAAmD;AACjD,QAAA,OAAO,CAAC,GAAR,CAAe,MAAM,GAAA,OAAN,GAAc,SAAd,GAAuB,GAAtC;AACD;;AACK,UAAA,EAAA,GAAkB,OAAA,CAAA,KAAA,CAAM,SAAN,CAAlB;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;AACN;;;AACA,UAAM,WAAW,GAAG,IAAI,GAAG,EAAP,GAAY,OAAO,CAAC,IAApB,GAA2B,OAAO,CAAC,GAAvD;;AACA,UAAI,KAAK,eAAL,GAAuB,KAAK,iBAAhC,EAAmD;AACjD,QAAA,WAAW,CAAI,MAAM,GAAA,OAAN,GAAc,SAAd,GAAuB,UAAvB,GAAkC,IAAlC,GAAsC,IAA1C,CAAX;AACD;;AACD,WAAK,eAAL;AACA,aAAO,KAAP;AACD,KAdD,MAcO;AACL,aAAO,SAAS,EAAhB;AACD;AACF,GApBD;;AAqBF,SAAA,iBAAA;AAAC,CA5CD,EAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PerformanceTracer = void 0;\r\nvar utils_1 = require(\"@chevrotain/utils\");\r\nvar parser_1 = require(\"../parser\");\r\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\r\nvar PerformanceTracer = /** @class */ (function () {\r\n    function PerformanceTracer() {\r\n    }\r\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\r\n        if (utils_1.has(config, \"traceInitPerf\")) {\r\n            var userTraceInitPerf = config.traceInitPerf;\r\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\r\n            this.traceInitMaxIdent = traceIsNumber\r\n                ? userTraceInitPerf\r\n                : Infinity;\r\n            this.traceInitPerf = traceIsNumber\r\n                ? userTraceInitPerf > 0\r\n                : userTraceInitPerf;\r\n        }\r\n        else {\r\n            this.traceInitMaxIdent = 0;\r\n            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\r\n        }\r\n        this.traceInitIndent = -1;\r\n    };\r\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\r\n        // No need to optimize this using NOOP pattern because\r\n        // It is not called in a hot spot...\r\n        if (this.traceInitPerf === true) {\r\n            this.traceInitIndent++;\r\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\r\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\r\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\r\n            }\r\n            var _a = utils_1.timer(phaseImpl), time = _a.time, value = _a.value;\r\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\r\n            var traceMethod = time > 10 ? console.warn : console.log;\r\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\r\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\r\n            }\r\n            this.traceInitIndent--;\r\n            return value;\r\n        }\r\n        else {\r\n            return phaseImpl();\r\n        }\r\n    };\r\n    return PerformanceTracer;\r\n}());\r\nexports.PerformanceTracer = PerformanceTracer;\r\n//# sourceMappingURL=perf_tracer.js.map"]},"metadata":{},"sourceType":"script"}