{"ast":null,"code":"import { Mesh, AnimationMixer, AnimationClip } from 'three';\n\nvar MorphAnimMesh = function (geometry, material) {\n  Mesh.call(this, geometry, material);\n  this.type = 'MorphAnimMesh';\n  this.mixer = new AnimationMixer(this);\n  this.activeAction = null;\n};\n\nMorphAnimMesh.prototype = Object.create(Mesh.prototype);\nMorphAnimMesh.prototype.constructor = MorphAnimMesh;\n\nMorphAnimMesh.prototype.setDirectionForward = function () {\n  this.mixer.timeScale = 1.0;\n};\n\nMorphAnimMesh.prototype.setDirectionBackward = function () {\n  this.mixer.timeScale = -1.0;\n};\n\nMorphAnimMesh.prototype.playAnimation = function (label, fps) {\n  if (this.activeAction) {\n    this.activeAction.stop();\n    this.activeAction = null;\n  }\n\n  var clip = AnimationClip.findByName(this, label);\n\n  if (clip) {\n    var action = this.mixer.clipAction(clip);\n    action.timeScale = clip.tracks.length * fps / clip.duration;\n    this.activeAction = action.play();\n  } else {\n    throw new Error('THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()');\n  }\n};\n\nMorphAnimMesh.prototype.updateAnimation = function (delta) {\n  this.mixer.update(delta);\n};\n\nMorphAnimMesh.prototype.copy = function (source) {\n  Mesh.prototype.copy.call(this, source);\n  this.mixer = new AnimationMixer(this);\n  return this;\n};\n\nexport { MorphAnimMesh };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/misc/MorphAnimMesh.js"],"names":["Mesh","AnimationMixer","AnimationClip","MorphAnimMesh","geometry","material","call","type","mixer","activeAction","prototype","Object","create","constructor","setDirectionForward","timeScale","setDirectionBackward","playAnimation","label","fps","stop","clip","findByName","action","clipAction","tracks","length","duration","play","Error","updateAnimation","delta","update","copy","source"],"mappings":"AAAA,SAASA,IAAT,EAAeC,cAAf,EAA+BC,aAA/B,QAAoD,OAApD;;AAEA,IAAIC,aAAa,GAAG,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAChDL,EAAAA,IAAI,CAACM,IAAL,CAAU,IAAV,EAAgBF,QAAhB,EAA0BC,QAA1B;AACA,OAAKE,IAAL,GAAY,eAAZ;AACA,OAAKC,KAAL,GAAa,IAAIP,cAAJ,CAAmB,IAAnB,CAAb;AACA,OAAKQ,YAAL,GAAoB,IAApB;AACD,CALD;;AAOAN,aAAa,CAACO,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcZ,IAAI,CAACU,SAAnB,CAA1B;AACAP,aAAa,CAACO,SAAd,CAAwBG,WAAxB,GAAsCV,aAAtC;;AAEAA,aAAa,CAACO,SAAd,CAAwBI,mBAAxB,GAA8C,YAAY;AACxD,OAAKN,KAAL,CAAWO,SAAX,GAAuB,GAAvB;AACD,CAFD;;AAIAZ,aAAa,CAACO,SAAd,CAAwBM,oBAAxB,GAA+C,YAAY;AACzD,OAAKR,KAAL,CAAWO,SAAX,GAAuB,CAAC,GAAxB;AACD,CAFD;;AAIAZ,aAAa,CAACO,SAAd,CAAwBO,aAAxB,GAAwC,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC5D,MAAI,KAAKV,YAAT,EAAuB;AACrB,SAAKA,YAAL,CAAkBW,IAAlB;AACA,SAAKX,YAAL,GAAoB,IAApB;AACD;;AAED,MAAIY,IAAI,GAAGnB,aAAa,CAACoB,UAAd,CAAyB,IAAzB,EAA+BJ,KAA/B,CAAX;;AAEA,MAAIG,IAAJ,EAAU;AACR,QAAIE,MAAM,GAAG,KAAKf,KAAL,CAAWgB,UAAX,CAAsBH,IAAtB,CAAb;AACAE,IAAAA,MAAM,CAACR,SAAP,GAAmBM,IAAI,CAACI,MAAL,CAAYC,MAAZ,GAAqBP,GAArB,GAA2BE,IAAI,CAACM,QAAnD;AACA,SAAKlB,YAAL,GAAoBc,MAAM,CAACK,IAAP,EAApB;AACD,GAJD,MAIO;AACL,UAAM,IAAIC,KAAJ,CAAU,qCAAqCX,KAArC,GAA6C,iCAAvD,CAAN;AACD;AACF,CAfD;;AAiBAf,aAAa,CAACO,SAAd,CAAwBoB,eAAxB,GAA0C,UAAUC,KAAV,EAAiB;AACzD,OAAKvB,KAAL,CAAWwB,MAAX,CAAkBD,KAAlB;AACD,CAFD;;AAIA5B,aAAa,CAACO,SAAd,CAAwBuB,IAAxB,GAA+B,UAAUC,MAAV,EAAkB;AAC/ClC,EAAAA,IAAI,CAACU,SAAL,CAAeuB,IAAf,CAAoB3B,IAApB,CAAyB,IAAzB,EAA+B4B,MAA/B;AACA,OAAK1B,KAAL,GAAa,IAAIP,cAAJ,CAAmB,IAAnB,CAAb;AACA,SAAO,IAAP;AACD,CAJD;;AAMA,SAASE,aAAT","sourcesContent":["import { Mesh, AnimationMixer, AnimationClip } from 'three';\r\n\r\nvar MorphAnimMesh = function (geometry, material) {\r\n  Mesh.call(this, geometry, material);\r\n  this.type = 'MorphAnimMesh';\r\n  this.mixer = new AnimationMixer(this);\r\n  this.activeAction = null;\r\n};\r\n\r\nMorphAnimMesh.prototype = Object.create(Mesh.prototype);\r\nMorphAnimMesh.prototype.constructor = MorphAnimMesh;\r\n\r\nMorphAnimMesh.prototype.setDirectionForward = function () {\r\n  this.mixer.timeScale = 1.0;\r\n};\r\n\r\nMorphAnimMesh.prototype.setDirectionBackward = function () {\r\n  this.mixer.timeScale = -1.0;\r\n};\r\n\r\nMorphAnimMesh.prototype.playAnimation = function (label, fps) {\r\n  if (this.activeAction) {\r\n    this.activeAction.stop();\r\n    this.activeAction = null;\r\n  }\r\n\r\n  var clip = AnimationClip.findByName(this, label);\r\n\r\n  if (clip) {\r\n    var action = this.mixer.clipAction(clip);\r\n    action.timeScale = clip.tracks.length * fps / clip.duration;\r\n    this.activeAction = action.play();\r\n  } else {\r\n    throw new Error('THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()');\r\n  }\r\n};\r\n\r\nMorphAnimMesh.prototype.updateAnimation = function (delta) {\r\n  this.mixer.update(delta);\r\n};\r\n\r\nMorphAnimMesh.prototype.copy = function (source) {\r\n  Mesh.prototype.copy.call(this, source);\r\n  this.mixer = new AnimationMixer(this);\r\n  return this;\r\n};\r\n\r\nexport { MorphAnimMesh };\r\n"]},"metadata":{},"sourceType":"module"}