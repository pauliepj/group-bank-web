{"ast":null,"code":"/**\r\n * Film grain & scanlines shader\r\n *\r\n * - ported from HLSL to WebGL / GLSL\r\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\r\n *\r\n * Screen Space Static Postprocessor\r\n *\r\n * Produces an analogue noise overlay similar to a film grain / TV static\r\n *\r\n * Original implementation and noise algorithm\r\n * Pat 'Hawthorne' Shearon\r\n *\r\n * Optimized scanlines + noise version with intensity scaling\r\n * Georg 'Leviathan' Steinrohder\r\n *\r\n * This version is provided under a Creative Commons Attribution 3.0 License\r\n * http://creativecommons.org/licenses/by/3.0/\r\n */\nvar FilmShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    time: {\n      value: 0.0\n    },\n    nIntensity: {\n      value: 0.5\n    },\n    sIntensity: {\n      value: 0.05\n    },\n    sCount: {\n      value: 4096\n    },\n    grayscale: {\n      value: 1\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', // control parameter\n  'uniform float time;', 'uniform bool grayscale;', // noise effect intensity value (0 = no effect, 1 = full effect)\n  'uniform float nIntensity;', // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  'uniform float sIntensity;', // scanlines effect count value (0 = no effect, 4096 = full effect)\n  'uniform float sCount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', // sample the source\n  '\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );', // make some noise\n  '\tfloat dx = rand( vUv + time );', // add noise\n  '\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );', // get us a sine and cosine\n  '\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );', // add scanlines\n  '\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;', // interpolate between source and result by intensity\n  '\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );', // convert to grayscale if desired\n  '\tif( grayscale ) {', '\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );', '\t}', '\tgl_FragColor =  vec4( cResult, cTextureScreen.a );', '}'].join('\\n')\n};\nexport { FilmShader };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/shaders/FilmShader.js"],"names":["FilmShader","uniforms","tDiffuse","value","time","nIntensity","sIntensity","sCount","grayscale","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAG;AACfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,IAAI,EAAE;AACJD,MAAAA,KAAK,EAAE;AADH,KAJE;AAORE,IAAAA,UAAU,EAAE;AACVF,MAAAA,KAAK,EAAE;AADG,KAPJ;AAURG,IAAAA,UAAU,EAAE;AACVH,MAAAA,KAAK,EAAE;AADG,KAVJ;AAaRI,IAAAA,MAAM,EAAE;AACNJ,MAAAA,KAAK,EAAE;AADD,KAbA;AAgBRK,IAAAA,SAAS,EAAE;AACTL,MAAAA,KAAK,EAAE;AADE;AAhBH,GADK;AAqBfM,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CArBC;AAsBfC,EAAAA,cAAc,EAAE,CAAC,mBAAD,EAAsB;AACtC,uBADgB,EACO,yBADP,EACkC;AAClD,6BAFgB,EAEa;AAC7B,6BAHgB,EAGa;AAC7B,yBAJgB,EAIS,6BAJT,EAIwC,mBAJxC,EAI6D,eAJ7D,EAI8E;AAC9F,sDALgB,EAKsC;AACtD,mCANgB,EAMmB;AACnC,0FAPgB,EAO0E;AAC1F,oEARgB,EAQoD;AACpE,2EATgB,EAS2D;AAC3E,oGAVgB,EAUoF;AACpG,sBAXgB,EAWM,4EAXN,EAWoF,IAXpF,EAW0F,qDAX1F,EAWiJ,GAXjJ,EAWsJD,IAXtJ,CAW2J,IAX3J;AAtBD,CAAjB;AAoCA,SAASV,UAAT","sourcesContent":["/**\r\n * Film grain & scanlines shader\r\n *\r\n * - ported from HLSL to WebGL / GLSL\r\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\r\n *\r\n * Screen Space Static Postprocessor\r\n *\r\n * Produces an analogue noise overlay similar to a film grain / TV static\r\n *\r\n * Original implementation and noise algorithm\r\n * Pat 'Hawthorne' Shearon\r\n *\r\n * Optimized scanlines + noise version with intensity scaling\r\n * Georg 'Leviathan' Steinrohder\r\n *\r\n * This version is provided under a Creative Commons Attribution 3.0 License\r\n * http://creativecommons.org/licenses/by/3.0/\r\n */\r\nvar FilmShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    time: {\r\n      value: 0.0\r\n    },\r\n    nIntensity: {\r\n      value: 0.5\r\n    },\r\n    sIntensity: {\r\n      value: 0.05\r\n    },\r\n    sCount: {\r\n      value: 4096\r\n    },\r\n    grayscale: {\r\n      value: 1\r\n    }\r\n  },\r\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\r\n  fragmentShader: ['#include <common>', // control parameter\r\n  'uniform float time;', 'uniform bool grayscale;', // noise effect intensity value (0 = no effect, 1 = full effect)\r\n  'uniform float nIntensity;', // scanlines effect intensity value (0 = no effect, 1 = full effect)\r\n  'uniform float sIntensity;', // scanlines effect count value (0 = no effect, 4096 = full effect)\r\n  'uniform float sCount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', // sample the source\r\n  '\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );', // make some noise\r\n  '\tfloat dx = rand( vUv + time );', // add noise\r\n  '\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );', // get us a sine and cosine\r\n  '\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );', // add scanlines\r\n  '\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;', // interpolate between source and result by intensity\r\n  '\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );', // convert to grayscale if desired\r\n  '\tif( grayscale ) {', '\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );', '\t}', '\tgl_FragColor =  vec4( cResult, cTextureScreen.a );', '}'].join('\\n')\r\n};\r\n\r\nexport { FilmShader };\r\n"]},"metadata":{},"sourceType":"module"}