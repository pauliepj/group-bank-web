{"ast":null,"code":"import * as THREE from 'three';\n\nconst pcss = ({\n  frustum = 3.75,\n  size = 0.005,\n  near = 9.5,\n  samples = 17,\n  rings = 11\n} = {}) => `#define LIGHT_WORLD_SIZE ${size}\n#define LIGHT_FRUSTUM_WIDTH ${frustum}\n#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\n#define NEAR_PLANE ${near}\n\n#define NUM_SAMPLES ${samples}\n#define NUM_RINGS ${rings}\n#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\n#define PCF_NUM_SAMPLES NUM_SAMPLES\n\nvec2 poissonDisk[NUM_SAMPLES];\n\nvoid initPoissonSamples(const in vec2 randomSeed) {\n\tfloat ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);\n\tfloat INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);\n\tfloat angle = rand(randomSeed) * PI2;\n\tfloat radius = INV_NUM_SAMPLES;\n\tfloat radiusStep = radius;\n\tfor (int i = 0; i < NUM_SAMPLES; i++) {\n\t\tpoissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);\n\t\tradius += radiusStep;\n\t\tangle += ANGLE_STEP;\n\t}\n}\n\nfloat penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation\n\treturn (zReceiver - zBlocker) / zBlocker;\n}\n\nfloat findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {\n\tfloat searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;\n\tfloat blockerDepthSum = 0.0;\n\tint numBlockers = 0;\n\tfor (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {\n\t\tfloat shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\n\t\tif (shadowMapDepth < zReceiver) {\n\t\t\tblockerDepthSum += shadowMapDepth;\n\t\t\tnumBlockers++;\n\t\t}\n\t}\n\tif (numBlockers == 0) return -1.0;\n\treturn blockerDepthSum / float(numBlockers);\n}\n\nfloat PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {\n\tfloat sum = 0.0;\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));\n\t\tif (zReceiver <= depth) sum += 1.0;\n\t}\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));\n\t\tif (zReceiver <= depth) sum += 1.0;\n\t}\n\treturn sum / (2.0 * float(PCF_NUM_SAMPLES));\n}\n\nfloat PCSS(sampler2D shadowMap, vec4 coords) {\n\tvec2 uv = coords.xy;\n\tfloat zReceiver = coords.z; // Assumed to be eye-space z in this code\n\tinitPoissonSamples(uv);\n\tfloat avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);\n\tif (avgBlockerDepth == -1.0) return 1.0;\n\tfloat penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n\tfloat filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\n\treturn PCF_Filter(shadowMap, uv, zReceiver, filterRadius);\n}`;\n\nlet deployed = false;\n\nconst softShadows = props => {\n  // Avoid adding the effect twice, which may happen in HMR scenarios\n  if (!deployed) {\n    deployed = true;\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({ ...props\n    }));\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n  }\n};\n\nexport { softShadows };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/@react-three/drei/core/softShadows.js"],"names":["THREE","pcss","frustum","size","near","samples","rings","deployed","softShadows","props","shader","ShaderChunk","shadowmap_pars_fragment","replace"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA,OAAO,GAAG,IADE;AAEZC,EAAAA,IAAI,GAAG,KAFK;AAGZC,EAAAA,IAAI,GAAG,GAHK;AAIZC,EAAAA,OAAO,GAAG,EAJE;AAKZC,EAAAA,KAAK,GAAG;AALI,IAMV,EANS,KAMD,4BAA2BH,IAAK;AAC5C,8BAA8BD,OAAQ;AACtC;AACA,qBAAqBE,IAAK;AAC1B;AACA,sBAAsBC,OAAQ;AAC9B,oBAAoBC,KAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAxEA;;AA0EA,IAAIC,QAAQ,GAAG,KAAf;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B;AACA,MAAI,CAACF,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,IAAX;AACA,QAAIG,MAAM,GAAGV,KAAK,CAACW,WAAN,CAAkBC,uBAA/B;AACAF,IAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAe,sBAAf,EAAuC,2BAA2BZ,IAAI,CAAC,EAAE,GAAGQ;AAAL,KAAD,CAAtE,CAAT;AAEAC,IAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAe,mCAAf,EAAoD,2EAApD,CAAT;AACAb,IAAAA,KAAK,CAACW,WAAN,CAAkBC,uBAAlB,GAA4CF,MAA5C;AACD;AACF,CAVD;;AAYA,SAASF,WAAT","sourcesContent":["import * as THREE from 'three';\r\n\r\nconst pcss = ({\r\n  frustum = 3.75,\r\n  size = 0.005,\r\n  near = 9.5,\r\n  samples = 17,\r\n  rings = 11\r\n} = {}) => `#define LIGHT_WORLD_SIZE ${size}\r\n#define LIGHT_FRUSTUM_WIDTH ${frustum}\r\n#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\r\n#define NEAR_PLANE ${near}\r\n\r\n#define NUM_SAMPLES ${samples}\r\n#define NUM_RINGS ${rings}\r\n#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\r\n#define PCF_NUM_SAMPLES NUM_SAMPLES\r\n\r\nvec2 poissonDisk[NUM_SAMPLES];\r\n\r\nvoid initPoissonSamples(const in vec2 randomSeed) {\r\n\tfloat ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);\r\n\tfloat INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);\r\n\tfloat angle = rand(randomSeed) * PI2;\r\n\tfloat radius = INV_NUM_SAMPLES;\r\n\tfloat radiusStep = radius;\r\n\tfor (int i = 0; i < NUM_SAMPLES; i++) {\r\n\t\tpoissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);\r\n\t\tradius += radiusStep;\r\n\t\tangle += ANGLE_STEP;\r\n\t}\r\n}\r\n\r\nfloat penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation\r\n\treturn (zReceiver - zBlocker) / zBlocker;\r\n}\r\n\r\nfloat findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {\r\n\tfloat searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;\r\n\tfloat blockerDepthSum = 0.0;\r\n\tint numBlockers = 0;\r\n\tfor (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {\r\n\t\tfloat shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\r\n\t\tif (shadowMapDepth < zReceiver) {\r\n\t\t\tblockerDepthSum += shadowMapDepth;\r\n\t\t\tnumBlockers++;\r\n\t\t}\r\n\t}\r\n\tif (numBlockers == 0) return -1.0;\r\n\treturn blockerDepthSum / float(numBlockers);\r\n}\r\n\r\nfloat PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {\r\n\tfloat sum = 0.0;\r\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\r\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));\r\n\t\tif (zReceiver <= depth) sum += 1.0;\r\n\t}\r\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\r\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));\r\n\t\tif (zReceiver <= depth) sum += 1.0;\r\n\t}\r\n\treturn sum / (2.0 * float(PCF_NUM_SAMPLES));\r\n}\r\n\r\nfloat PCSS(sampler2D shadowMap, vec4 coords) {\r\n\tvec2 uv = coords.xy;\r\n\tfloat zReceiver = coords.z; // Assumed to be eye-space z in this code\r\n\tinitPoissonSamples(uv);\r\n\tfloat avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);\r\n\tif (avgBlockerDepth == -1.0) return 1.0;\r\n\tfloat penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\r\n\tfloat filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\r\n\treturn PCF_Filter(shadowMap, uv, zReceiver, filterRadius);\r\n}`;\r\n\r\nlet deployed = false;\r\nconst softShadows = props => {\r\n  // Avoid adding the effect twice, which may happen in HMR scenarios\r\n  if (!deployed) {\r\n    deployed = true;\r\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\r\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({ ...props\r\n    }));\r\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\r\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\r\n  }\r\n};\r\n\r\nexport { softShadows };\r\n"]},"metadata":{},"sourceType":"module"}