{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"type\", 'LineGeometry');\n\n    _defineProperty(this, \"isLineGeometry\", true);\n\n    _defineProperty(this, \"setColors\", array => {\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n      const length = array.length - 3;\n      const colors = new Float32Array(2 * length);\n\n      for (let i = 0; i < length; i += 3) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n\n      super.setColors(colors);\n      return this;\n    });\n\n    _defineProperty(this, \"fromLine\", line => {\n      const geometry = line.geometry;\n\n      if (geometry.isBufferGeometry) {\n        this.setPositions(Array.from(geometry.attributes.position.array)); // assumes non-indexed\n      } // set colors, maybe\n\n\n      return this;\n    });\n\n    _defineProperty(this, \"copy\", () => {\n      // todo\n      return this;\n    });\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n}\n\nexport { LineGeometry };","map":{"version":3,"sources":["C:/Users/samue/Documents/REACTworkspace/group-bank-web/node_modules/three-stdlib/lines/LineGeometry.js"],"names":["_defineProperty","LineSegmentsGeometry","LineGeometry","constructor","array","length","colors","Float32Array","i","setColors","line","geometry","isBufferGeometry","setPositions","Array","from","attributes","position","points"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\r\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\r\n\r\nclass LineGeometry extends LineSegmentsGeometry {\r\n  constructor() {\r\n    super();\r\n\r\n    _defineProperty(this, \"type\", 'LineGeometry');\r\n\r\n    _defineProperty(this, \"isLineGeometry\", true);\r\n\r\n    _defineProperty(this, \"setColors\", array => {\r\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\r\n      const length = array.length - 3;\r\n      const colors = new Float32Array(2 * length);\r\n\r\n      for (let i = 0; i < length; i += 3) {\r\n        colors[2 * i] = array[i];\r\n        colors[2 * i + 1] = array[i + 1];\r\n        colors[2 * i + 2] = array[i + 2];\r\n        colors[2 * i + 3] = array[i + 3];\r\n        colors[2 * i + 4] = array[i + 4];\r\n        colors[2 * i + 5] = array[i + 5];\r\n      }\r\n\r\n      super.setColors(colors);\r\n      return this;\r\n    });\r\n\r\n    _defineProperty(this, \"fromLine\", line => {\r\n      const geometry = line.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        this.setPositions(Array.from(geometry.attributes.position.array)); // assumes non-indexed\r\n      } // set colors, maybe\r\n\r\n\r\n      return this;\r\n    });\r\n\r\n    _defineProperty(this, \"copy\", () => {\r\n      // todo\r\n      return this;\r\n    });\r\n  }\r\n\r\n  setPositions(array) {\r\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\r\n    const length = array.length - 3;\r\n    const points = new Float32Array(2 * length);\r\n\r\n    for (let i = 0; i < length; i += 3) {\r\n      points[2 * i] = array[i];\r\n      points[2 * i + 1] = array[i + 1];\r\n      points[2 * i + 2] = array[i + 2];\r\n      points[2 * i + 3] = array[i + 3];\r\n      points[2 * i + 4] = array[i + 4];\r\n      points[2 * i + 5] = array[i + 5];\r\n    }\r\n\r\n    super.setPositions(points);\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport { LineGeometry };\r\n"]},"metadata":{},"sourceType":"module"}